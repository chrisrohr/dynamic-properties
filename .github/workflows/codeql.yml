# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
    types: [ opened, synchronize, reopened ]
    paths-ignore:
      - '**/*.md'
      - '**/*.txt'
  schedule:
    - cron: '36 23 * * 3'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Debugging stuff
      run: |
        echo "working dir: `pwd`"
        echo "finding java-code-scanning.qls"
        find /home/runner/work -name java-code-scanning.qls
        find /opt/hostedtoolcache/CodeQL/ -name java-code-scanning.qls

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    - name: List environment (after codeql-action-init and before custom build)
      run: |
        echo "env vars with CODEQL:"
        env | grep CODEQL
        echo "env vars with SEMMLE:"
        env | grep SEMMLE
        echo "env var LD_PRELOAD:"
        env | grep LD_PRELOAD

    - name: More Debugging stuff
      run: |
        echo "working dir: `pwd`"
        echo "Try to find java-code-scanning.qls (again)"
        find /home/runner/work -name java-code-scanning.qls
        find /opt/hostedtoolcache/CodeQL/ -name java-code-scanning.qls
        echo "java-code-scanning.qls:"
        cat /opt/hostedtoolcache/CodeQL/0.0.0-20230105/x64/codeql/qlpacks/codeql/java-queries/0.5.0/codeql-suites/java-code-scanning.qls
        echo "-- java-code-scanning.qls:"
        echo "list /opt/hostedtoolcache/CodeQL/0.0.0-20230105/x64/codeql/qlpacks"
        ls -l /opt/hostedtoolcache/CodeQL/0.0.0-20230105/x64/codeql/qlpacks
        echo "list /opt/hostedtoolcache/CodeQL/0.0.0-20230105/x64/codeql/qlpacks/codeql/java-all"
        ls -l /opt/hostedtoolcache/CodeQL/0.0.0-20230105/x64/codeql/qlpacks/codeql/java-all

    # Use cache of Maven repository
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    # - name: Autobuild
    #   uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

    # - name: Build code
    #   run: |
    #     echo "Build with maven using codeql profile"
    #     mvn -Pcodeql -B -V -e -Denforcer.skip -DskipTests clean package
    #     echo "Remove 'Generated by delombok' lines from source files"
    #     find target/generated-sources/delombok -name '*.java' -exec sed '/Generated by delombok/d' -i '{}' ';'
    #     find target/generated-test-sources/delombok -name '*.java' -exec sed '/Generated by delombok/d' -i '{}' ';'
    #     echo "Copy delomboked files back to original source directories"
    #     cp -R target/generated-sources/delombok/* src/main/java/
    #     echo "First lines of Property.java which should be the delomboked version:"
    #     head src/main/java/org/kiwiproject/dynamicproperties/Property.java
    #     cp -R target/generated-test-sources/delombok/* src/test/java/
    #     echo "First lines of Department.java which should be the delomboked version:"
    #     cat src/test/java/org/kiwiproject/dynamicproperties/data/Department.java

    - name: Build
      run: ./build-for-codeql.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"

    - name: List environment (after custom build)
      run: |
        echo "env vars with CODEQL:"
        env | grep CODEQL
        echo "env vars with SEMMLE:"
        env | grep SEMMLE
        echo "env var LD_PRELOAD:"
        env | grep LD_PRELOAD


# Misc:
#  --search-path=/home/gitpod/.codeql/packages/codeql/java-queries:/home/gitpod/.codeql/packages/codeql/suite-helpers/


# The following work locally.

# 1. With Autobuild - run analysis locally using autobuild

# -- create database
# codeql database create /workspace/db/java --language=java

# -- analyze #1
# codeql database analyze  --format=csv --output=codeql-results.csv /workspace/db/java codeql/java-queries

# -- analyze #2
# codeql database analyze  --format=csv --output=codeql-results.csv /workspace/db/java /home/gitpod/.codeql/packages/codeql/java-queries/0.5.1/codeql-suites/java-lgtm-full.qls

# --print baseline info
# codeql database print-baseline /workspace/db/java


# 2. With Custom build - run analysis locally using custom build

# -- create-database
# codeql database init --language=java --begin-tracing --source-root=/workspace/dynamic-properties-provider  /workspace/db/java

# -- start tracing
# source /workspace/db/java/temp/tracingEnvironment/start-tracing.sh

# -- run custom build
# ./build-for-codeql.sh

# -- end tracing
# source /workspace/db/java/temp/tracingEnvironment/end-tracing.sh

# -- finalize database
# codeql database finalize /workspace/db/java

# -- analyze #1
# codeql database analyze  --format=csv --output=codeql-results.csv /workspace/db/java codeql/java-queries

# -- analyze #2
# codeql database analyze  --format=csv --output=codeql-results.csv /workspace/db/java /home/gitpod/.codeql/packages/codeql/java-queries/0.5.1/codeql-suites/java-lgtm-full.qls

# --print baseline info
# codeql database print-baseline /workspace/db/java


# How to do the above in GitHub actions???